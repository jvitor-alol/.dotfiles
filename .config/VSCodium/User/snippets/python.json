{
	"Main Function Boilerplate": {
		"prefix": "!main",
		"body": [
			"#!/usr/bin/env python",
			"",
			"def main() -> None:",
			"\tpass",
			"",
			"",
			"if __name__ == '__main__':",
			"\tmain()",
			""
		],
		"description": "Generate a main function"
	},
	"Logging Configuration": {
		"prefix": "!logs",
		"body": [
			"if not os.path.exists('./logs'):",
			"\tos.makedirs('./logs')",
			"",
			"logging.basicConfig(",
			"\tlevel=logging.INFO,",
			"\tformat='%(asctime)s %(module)s %(levelname)s: %(message)s',",
			"\tdatefmt='%Y/%m/%d %I:%M:%S %p %z',",
			"\thandlers=[",
			"\t\tlogging.FileHandler(",
			"\t\t\tf'./logs/{datetime.now().strftime(\"%Y-%m-%d_%H%M%S\")}.log'),",
			"\t\tlogging.StreamHandler()",
			"\t]",
			")",
			"logger = logging.getLogger(__name__)",
			""
		],
		"description": "Configure logging setup"
	},
	"Open File Context": {
		"prefix": "!open",
		"body": [
			"filepath = '${1:filepath}'",
			"",
			"with open(filepath, mode='${2:mode}', encoding='utf-8') as file:",
			"\t${3:pass}"
		],
		"description": "Snippet to open a file context"
	},
	"Function Definition": {
		"prefix": "!def",
		"body": [
			"def ${1:function_name}(${2:parameters}${3:, *args, **kwargs}) -> ${4:None}:",
			"\t${5:pass}"
		],
		"description": "Create a new function"
	},
	"Generic Decorator": {
		"prefix": "!decorate",
		"body": [
			"def ${1:decorator_name}(function: Callable) -> Callable:",
			"\tdef wrapper(*args, **kwargs) -> ${2:Any}:",
			"\t\t${3:# code here}",
			"\t\tresult = function(*args, **kwargs)",
			"\t\t${4:# additional code here}",
			"\t\treturn result",
			"\treturn wrapper"
		],
		"description": "Creates a new generic decorator",
	},
	"Clear Terminal": {
		"prefix": "!clear",
		"body": [
			"os.system('cls' if os.name == 'nt' else 'clear')"
		],
		"description": "Clears terminal screen according to operational system"
	},
	"ASCII Art": {
		"prefix": "!ascii",
		"body": [
			"r\"\"\"",
			"###########################################################################",
			"|----------__-------------------------------------------------------------|",
			"|---------|  \\------------------------------------------------------------|",
			"|---------| ▓▓____   ______   _______  _______ __    __ _______-----------|",
			"|---------| ▓▓    \\ /      \\ /       \\/       \\  \\  |  \\       \\----------|",
			"|---------| ▓▓▓▓▓▓▓\\  ▓▓▓▓▓▓\\  ▓▓▓▓▓▓▓  ▓▓▓▓▓▓▓ ▓▓  | ▓▓ ▓▓▓▓▓▓▓\\---------|",
			"|---------| ▓▓  | ▓▓ ▓▓  | ▓▓\\▓▓    \\ \\▓▓    \\| ▓▓  | ▓▓ ▓▓  | ▓▓---------|",
			"|---------| ▓▓__/ ▓▓ ▓▓__/ ▓▓_\\▓▓▓▓▓▓\\_\\▓▓▓▓▓▓\\ ▓▓__/ ▓▓ ▓▓  | ▓▓---------|",
			"|---------| ▓▓    ▓▓\\▓▓    ▓▓       ▓▓       ▓▓\\▓▓    ▓▓ ▓▓  | ▓▓---------|",
			"|----------\\▓▓▓▓▓▓▓  \\▓▓▓▓▓▓ \\▓▓▓▓▓▓▓ \\▓▓▓▓▓▓▓  \\▓▓▓▓▓▓ \\▓▓   \\▓▓---------|",
			"|-------------------------------------------------------------------------|",
			"###########################################################################",
			"\"\"\""
		],
		"description": "ASCII Art"
	}
}